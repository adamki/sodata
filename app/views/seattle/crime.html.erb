<div class="ui column centered grid raised  padded text  segment ">
  <input id="pac-input" class="controls" type="text"
      placeholder="Enter a location">
  <div id="type-selector" class="controls">
    <input type="radio" name="type" id="changetype-all" checked="checked">
    <label for="changetype-all">All</label>

    <input type="radio" name="type" id="changetype-establishment">
    <label for="changetype-establishment">Establishments</label>

    <input type="radio" name="type" id="changetype-address">
    <label for="changetype-address">Addresses</label>

    <input type="radio" name="type" id="changetype-geocode">
    <label for="changetype-geocode">Geocodes</label>
  </div>
  <div id="map"></div>
</div>

<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyAbcLBwo2NDXZGjkp7wpfgAAsL9q_XXaeo&signed_in=true&libraries=places&callback=initMap" async defer>
</script>

<script  type="text/javascript">
  var locations= [];
  var thefts = [];
  var bike_racks = [];

  <% @seattle_crimes.each do |crime| %>
    locations.push(["crime", <%= crime.latitude %>, <%= crime.longitude%>, 3])
  <% end %>

  <% @bike_thefts.each do |theft| %>
    thefts.push(["theft", <%= theft.latitude %>, <%= theft.longitude%>, 3])
  <% end %>

  <% @bike_racks.each do |bike_rack| %>
    bike_racks.push(["rack", <%= bike_rack.latitude %>, <%= bike_rack.longitude%>, 3])
  <% end %>

  function initMap() {
    var map = new google.maps.Map(document.getElementById('map'), {
      zoom: 13,
      center: new google.maps.LatLng(47.614074707,-122.320777893),
      mapTypeId: google.maps.MapTypeId.ROADMAP
    });

    var infowindow = new google.maps.InfoWindow();
    var marker, theft, rack, i, j, k;

    for (i = 0; i < locations.length; i++) {
      marker = new google.maps.Marker({
        position: new google.maps.LatLng(locations[i][1], locations[i][2]),
        map: map,
        icon:  'https://maps.google.com/mapfiles/kml/shapes/schools_maps.png'
      });
      google.maps.event.addListener(marker, 'click', (function(marker, i) {
        return function() {
          infowindow.setContent(locations[i][0]);
          infowindow.open(map, marker);
        }
      })(marker, i));
    }


    for (j = 0; j < thefts.length; j++) {
      theft = new google.maps.Marker({
        position: new google.maps.LatLng(thefts[j][1], thefts[j][2]),
        map: map,
        icon:  'https://maps.google.com/mapfiles/kml/shapes/cycling.png'
      });

      google.maps.event.addListener(theft, 'click', (function(theft, j) {
        return function() {
          infowindow.setContent(thefts[j][0]);
          infowindow.open(map, theft);
        }
      })(theft, j));
    }

    for (k = 0; k < bike_racks.length; k++) {
      rack = new google.maps.Marker({
        position: new google.maps.LatLng(bike_racks[k][1], bike_racks[k][2]),
        map: map
      });

      google.maps.event.addListener(rack, 'click', (function(rack, k) {
        return function() {
          infowindow.setContent(bike_racks[k][0]);
          infowindow.open(map, rack);
        }
      })(rack, k));
    }

  var input = /** @type {!HTMLInputElement} */(
      document.getElementById('pac-input'));

  var types = document.getElementById('type-selector');

  map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);
  map.controls[google.maps.ControlPosition.TOP_LEFT].push(types);

  var autocomplete = new google.maps.places.Autocomplete(input);
  autocomplete.bindTo('bounds', map);

  var infowindow = new google.maps.InfoWindow();

  autocomplete.addListener('place_changed', function() {
    infowindow.close();
    marker.setVisible(false);
    var place = autocomplete.getPlace();

    if (!place.geometry) {
      window.alert("Autocomplete's returned place contains no geometry");
      return;
    }

    // If the place has a geometry, then present it on a map.
    if (place.geometry.viewport) {
      map.fitBounds(place.geometry.viewport);
    } else {
      map.setCenter(place.geometry.location);
      map.setZoom(17);  // Why 17? Because it looks good.
    }
    marker.setIcon(/** @type {google.maps.Icon} */({
      url: place.icon,
      size: new google.maps.Size(71, 71),
      origin: new google.maps.Point(0, 0),
      anchor: new google.maps.Point(17, 34),
      scaledSize: new google.maps.Size(35, 35)
    }));
    marker.setPosition(place.geometry.location);
    marker.setVisible(true);

    var address = '';
    if (place.address_components) {
      address = [
        (place.address_components[0] && place.address_components[0].short_name || ''),
        (place.address_components[1] && place.address_components[1].short_name || ''),
        (place.address_components[2] && place.address_components[2].short_name || '')
        ].join(' ');
      }

      infowindow.setContent('<div><strong>' + place.name + '</strong><br>' + address);
      infowindow.open(map, marker);
    });

    // Sets a listener on a radio button to change the filter type on Places
    // Autocomplete.
    function setupClickListener(id, types) {
      var radioButton = document.getElementById(id);
      radioButton.addEventListener('click', function() {
        autocomplete.setTypes(types);
      });
    }

    setupClickListener('changetype-all', []);
    setupClickListener('changetype-address', ['address']);
    setupClickListener('changetype-establishment', ['establishment']);
    setupClickListener('changetype-geocode', ['geocode']);
  }

</script>
